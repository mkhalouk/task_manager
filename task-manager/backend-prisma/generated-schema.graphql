# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Action {
  created_at: DateTime!
  group: [String!]!
  id: ID!
  name: [String!]!
  target_id: String!
  target_type: [String!]!
}

type ActionCountAggregate {
  _all: Int!
  created_at: Int!
  group: Int!
  id: Int!
  name: Int!
  target_id: Int!
  target_type: Int!
}

input ActionCountOrderByAggregateInput {
  created_at: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  target_id: SortOrder
  target_type: SortOrder
}

input ActionCreateInput {
  created_at: DateTime!
  group: ActionCreategroupInput
  id: String
  name: ActionCreatenameInput
  target_id: String!
  target_type: ActionCreatetarget_typeInput
}

input ActionCreateManyInput {
  created_at: DateTime!
  group: ActionCreategroupInput
  id: String
  name: ActionCreatenameInput
  target_id: String!
  target_type: ActionCreatetarget_typeInput
}

input ActionCreategroupInput {
  set: [String!]!
}

input ActionCreatenameInput {
  set: [String!]!
}

input ActionCreatetarget_typeInput {
  set: [String!]!
}

type ActionGroupBy {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  created_at: DateTime!
  group: [String!]
  id: String!
  name: [String!]
  target_id: String!
  target_type: [String!]
}

type ActionMaxAggregate {
  created_at: DateTime
  id: String
  target_id: String
}

input ActionMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  target_id: SortOrder
}

type ActionMinAggregate {
  created_at: DateTime
  id: String
  target_id: String
}

input ActionMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  target_id: SortOrder
}

input ActionOrderByWithAggregationInput {
  _count: ActionCountOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  created_at: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  target_id: SortOrder
  target_type: SortOrder
}

input ActionOrderByWithRelationInput {
  created_at: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  target_id: SortOrder
  target_type: SortOrder
}

enum ActionScalarFieldEnum {
  created_at
  group
  id
  name
  target_id
  target_type
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  group: StringNullableListFilter
  id: StringWithAggregatesFilter
  name: StringNullableListFilter
  target_id: StringWithAggregatesFilter
  target_type: StringNullableListFilter
}

input ActionUpdateInput {
  created_at: DateTimeFieldUpdateOperationsInput
  group: ActionUpdategroupInput
  id: StringFieldUpdateOperationsInput
  name: ActionUpdatenameInput
  target_id: StringFieldUpdateOperationsInput
  target_type: ActionUpdatetarget_typeInput
}

input ActionUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  group: ActionUpdategroupInput
  id: StringFieldUpdateOperationsInput
  name: ActionUpdatenameInput
  target_id: StringFieldUpdateOperationsInput
  target_type: ActionUpdatetarget_typeInput
}

input ActionUpdategroupInput {
  push: [String!]
  set: [String!]
}

input ActionUpdatenameInput {
  push: [String!]
  set: [String!]
}

input ActionUpdatetarget_typeInput {
  push: [String!]
  set: [String!]
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  created_at: DateTimeFilter
  group: StringNullableListFilter
  id: StringFilter
  name: StringNullableListFilter
  target_id: StringFilter
  target_type: StringNullableListFilter
}

input ActionWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAction {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
}

type AggregateAssignee {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
}

type AggregateComment {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
}

type AggregateNotification {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
}

type AggregateTask {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Assignee {
  created_at: DateTime!
  id: ID!
  task_id: String!
  user_id: String!
}

type AssigneeCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  task_id: Int!
  user_id: Int!
}

input AssigneeCountOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

input AssigneeCreateInput {
  created_at: DateTime!
  id: String
  task_id: String!
  user_id: String!
}

input AssigneeCreateManyInput {
  created_at: DateTime!
  id: String
  task_id: String!
  user_id: String!
}

type AssigneeGroupBy {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
  created_at: DateTime!
  id: String!
  task_id: String!
  user_id: String!
}

type AssigneeMaxAggregate {
  created_at: DateTime
  id: String
  task_id: String
  user_id: String
}

input AssigneeMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

type AssigneeMinAggregate {
  created_at: DateTime
  id: String
  task_id: String
  user_id: String
}

input AssigneeMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

input AssigneeOrderByWithAggregationInput {
  _count: AssigneeCountOrderByAggregateInput
  _max: AssigneeMaxOrderByAggregateInput
  _min: AssigneeMinOrderByAggregateInput
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

input AssigneeOrderByWithRelationInput {
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

enum AssigneeScalarFieldEnum {
  created_at
  id
  task_id
  user_id
}

input AssigneeScalarWhereWithAggregatesInput {
  AND: [AssigneeScalarWhereWithAggregatesInput!]
  NOT: [AssigneeScalarWhereWithAggregatesInput!]
  OR: [AssigneeScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  task_id: StringWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

input AssigneeUpdateInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  task_id: StringFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input AssigneeUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  task_id: StringFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input AssigneeWhereInput {
  AND: [AssigneeWhereInput!]
  NOT: [AssigneeWhereInput!]
  OR: [AssigneeWhereInput!]
  created_at: DateTimeFilter
  id: StringFilter
  task_id: StringFilter
  user_id: StringFilter
}

input AssigneeWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Comment {
  content: String!
  created_at: DateTime!
  id: ID!
  owner_id: String
  parent_id: String!
  target_id: String!
  target_type: [String!]!
  updated_at: DateTime!
}

type CommentCountAggregate {
  _all: Int!
  content: Int!
  created_at: Int!
  id: Int!
  owner_id: Int!
  parent_id: Int!
  target_id: Int!
  target_type: Int!
  updated_at: Int!
}

input CommentCountOrderByAggregateInput {
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

input CommentCreateInput {
  content: String!
  created_at: DateTime!
  id: String
  owner_id: String
  parent_id: String!
  target_id: String!
  target_type: CommentCreatetarget_typeInput
  updated_at: DateTime!
}

input CommentCreateManyInput {
  content: String!
  created_at: DateTime!
  id: String
  owner_id: String
  parent_id: String!
  target_id: String!
  target_type: CommentCreatetarget_typeInput
  updated_at: DateTime!
}

input CommentCreatetarget_typeInput {
  set: [String!]!
}

type CommentGroupBy {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  content: String!
  created_at: DateTime!
  id: String!
  owner_id: String
  parent_id: String!
  target_id: String!
  target_type: [String!]
  updated_at: DateTime!
}

type CommentMaxAggregate {
  content: String
  created_at: DateTime
  id: String
  owner_id: String
  parent_id: String
  target_id: String
  updated_at: DateTime
}

input CommentMaxOrderByAggregateInput {
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  updated_at: SortOrder
}

type CommentMinAggregate {
  content: String
  created_at: DateTime
  id: String
  owner_id: String
  parent_id: String
  target_id: String
  updated_at: DateTime
}

input CommentMinOrderByAggregateInput {
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  updated_at: SortOrder
}

input CommentOrderByWithAggregationInput {
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

input CommentOrderByWithRelationInput {
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

enum CommentScalarFieldEnum {
  content
  created_at
  id
  owner_id
  parent_id
  target_id
  target_type
  updated_at
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  owner_id: StringNullableWithAggregatesFilter
  parent_id: StringWithAggregatesFilter
  target_id: StringWithAggregatesFilter
  target_type: StringNullableListFilter
  updated_at: DateTimeWithAggregatesFilter
}

input CommentUpdateInput {
  content: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner_id: NullableStringFieldUpdateOperationsInput
  parent_id: StringFieldUpdateOperationsInput
  target_id: StringFieldUpdateOperationsInput
  target_type: CommentUpdatetarget_typeInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner_id: NullableStringFieldUpdateOperationsInput
  parent_id: StringFieldUpdateOperationsInput
  target_id: StringFieldUpdateOperationsInput
  target_type: CommentUpdatetarget_typeInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input CommentUpdatetarget_typeInput {
  push: [String!]
  set: [String!]
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  created_at: DateTimeFilter
  id: StringFilter
  owner_id: StringNullableFilter
  parent_id: StringFilter
  target_id: StringFilter
  target_type: StringNullableListFilter
  updated_at: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Mutation {
  createManyAction(data: [ActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAssignee(data: [AssigneeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNotification(data: [NotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTask(data: [TaskCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAction(data: ActionCreateInput!): Action!
  createOneAssignee(data: AssigneeCreateInput!): Assignee!
  createOneComment(data: CommentCreateInput!): Comment!
  createOneNotification(data: NotificationCreateInput!): Notification!
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  deleteManyAction(where: ActionWhereInput): AffectedRowsOutput!
  deleteManyAssignee(where: AssigneeWhereInput): AffectedRowsOutput!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyNotification(where: NotificationWhereInput): AffectedRowsOutput!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneAction(where: ActionWhereUniqueInput!): Action
  deleteOneAssignee(where: AssigneeWhereUniqueInput!): Assignee
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneNotification(where: NotificationWhereUniqueInput!): Notification
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  loginUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User!
  updateManyAction(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): AffectedRowsOutput!
  updateManyAssignee(data: AssigneeUpdateManyMutationInput!, where: AssigneeWhereInput): AffectedRowsOutput!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyNotification(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): AffectedRowsOutput!
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateOneAssignee(data: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneAction(create: ActionCreateInput!, update: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action!
  upsertOneAssignee(create: AssigneeCreateInput!, update: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee!
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneNotification(create: NotificationCreateInput!, update: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification!
  upsertOneTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  action_id: String!
  id: ID!
  readed_at: DateTime!
  user_id: String!
}

type NotificationCountAggregate {
  _all: Int!
  action_id: Int!
  id: Int!
  readed_at: Int!
  user_id: Int!
}

input NotificationCountOrderByAggregateInput {
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

input NotificationCreateInput {
  action_id: String!
  id: String
  readed_at: DateTime!
  user_id: String!
}

input NotificationCreateManyInput {
  action_id: String!
  id: String
  readed_at: DateTime!
  user_id: String!
}

type NotificationGroupBy {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
  action_id: String!
  id: String!
  readed_at: DateTime!
  user_id: String!
}

type NotificationMaxAggregate {
  action_id: String
  id: String
  readed_at: DateTime
  user_id: String
}

input NotificationMaxOrderByAggregateInput {
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

type NotificationMinAggregate {
  action_id: String
  id: String
  readed_at: DateTime
  user_id: String
}

input NotificationMinOrderByAggregateInput {
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

input NotificationOrderByWithAggregationInput {
  _count: NotificationCountOrderByAggregateInput
  _max: NotificationMaxOrderByAggregateInput
  _min: NotificationMinOrderByAggregateInput
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

input NotificationOrderByWithRelationInput {
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

enum NotificationScalarFieldEnum {
  action_id
  id
  readed_at
  user_id
}

input NotificationScalarWhereWithAggregatesInput {
  AND: [NotificationScalarWhereWithAggregatesInput!]
  NOT: [NotificationScalarWhereWithAggregatesInput!]
  OR: [NotificationScalarWhereWithAggregatesInput!]
  action_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  readed_at: DateTimeWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

input NotificationUpdateInput {
  action_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input NotificationUpdateManyMutationInput {
  action_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  action_id: StringFilter
  id: StringFilter
  readed_at: DateTimeFilter
  user_id: StringFilter
}

input NotificationWhereUniqueInput {
  id: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  action(where: ActionWhereUniqueInput!): Action
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  aggregateAction(cursor: ActionWhereUniqueInput, orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): AggregateAction!
  aggregateAssignee(cursor: AssigneeWhereUniqueInput, orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): AggregateAssignee!
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateNotification(cursor: NotificationWhereUniqueInput, orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): AggregateNotification!
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  assignee(where: AssigneeWhereUniqueInput!): Assignee
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findFirstAction(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstActionOrThrow(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstAssignee(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstAssigneeOrThrow(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentOrThrow(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstNotification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstNotificationOrThrow(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstTaskOrThrow(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getAction(where: ActionWhereUniqueInput!): Action
  getAssignee(where: AssigneeWhereUniqueInput!): Assignee
  getComment(where: CommentWhereUniqueInput!): Comment
  getNotification(where: NotificationWhereUniqueInput!): Notification
  getTask(where: TaskWhereUniqueInput!): Task
  getUser(where: UserWhereUniqueInput!): User
  groupByAction(by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, orderBy: [ActionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionWhereInput): [ActionGroupBy!]!
  groupByAssignee(by: [AssigneeScalarFieldEnum!]!, having: AssigneeScalarWhereWithAggregatesInput, orderBy: [AssigneeOrderByWithAggregationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [AssigneeGroupBy!]!
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByNotification(by: [NotificationScalarFieldEnum!]!, having: NotificationScalarWhereWithAggregatesInput, orderBy: [NotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: NotificationWhereInput): [NotificationGroupBy!]!
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: ID!
  owner_id: String!
  state: [String!]!
  title: String!
  updated_at: DateTime!
}

type TaskCountAggregate {
  _all: Int!
  created_at: Int!
  description: Int!
  due_at: Int!
  id: Int!
  owner_id: Int!
  state: Int!
  title: Int!
  updated_at: Int!
}

input TaskCountOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  updated_at: SortOrder
}

input TaskCreateInput {
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  owner_id: String!
  state: TaskCreatestateInput
  title: String!
  updated_at: DateTime!
}

input TaskCreateManyInput {
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  owner_id: String!
  state: TaskCreatestateInput
  title: String!
  updated_at: DateTime!
}

input TaskCreatestateInput {
  set: [String!]!
}

type TaskGroupBy {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String!
  owner_id: String!
  state: [String!]
  title: String!
  updated_at: DateTime!
}

type TaskMaxAggregate {
  created_at: DateTime
  description: String
  due_at: DateTime
  id: String
  owner_id: String
  title: String
  updated_at: DateTime
}

input TaskMaxOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  title: SortOrder
  updated_at: SortOrder
}

type TaskMinAggregate {
  created_at: DateTime
  description: String
  due_at: DateTime
  id: String
  owner_id: String
  title: String
  updated_at: DateTime
}

input TaskMinOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  title: SortOrder
  updated_at: SortOrder
}

input TaskOrderByWithAggregationInput {
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  updated_at: SortOrder
}

input TaskOrderByWithRelationInput {
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  updated_at: SortOrder
}

enum TaskScalarFieldEnum {
  created_at
  description
  due_at
  id
  owner_id
  state
  title
  updated_at
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  due_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  owner_id: StringWithAggregatesFilter
  state: StringNullableListFilter
  title: StringWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

input TaskUpdateInput {
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  due_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner_id: StringFieldUpdateOperationsInput
  state: TaskUpdatestateInput
  title: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  due_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner_id: StringFieldUpdateOperationsInput
  state: TaskUpdatestateInput
  title: StringFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input TaskUpdatestateInput {
  push: [String!]
  set: [String!]
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  created_at: DateTimeFilter
  description: StringFilter
  due_at: DateTimeFilter
  id: StringFilter
  owner_id: StringFilter
  state: StringNullableListFilter
  title: StringFilter
  updated_at: DateTimeFilter
}

input TaskWhereUniqueInput {
  id: String
}

type User {
  active: Boolean!
  created_at: DateTime!
  email: String!
  id: ID!
  last_sign_in_at: DateTime!
  name: String!
  password: String!
  password_digest: String!
  preferences: JSON!
  updated_at: DateTime!
}

type UserCountAggregate {
  _all: Int!
  active: Int!
  created_at: Int!
  email: Int!
  id: Int!
  last_sign_in_at: Int!
  name: Int!
  password: Int!
  password_digest: Int!
  preferences: Int!
  updated_at: Int!
}

input UserCountOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password: SortOrder
  password_digest: SortOrder
  preferences: SortOrder
  updated_at: SortOrder
}

input UserCreateInput {
  active: Boolean!
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  password: String!
  password_digest: String!
  preferences: JSON!
  updated_at: DateTime!
}

input UserCreateManyInput {
  active: Boolean!
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  password: String!
  password_digest: String!
  preferences: JSON!
  updated_at: DateTime!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  active: Boolean!
  created_at: DateTime!
  email: String!
  id: String!
  last_sign_in_at: DateTime!
  name: String!
  password: String!
  password_digest: String!
  preferences: JSON!
  updated_at: DateTime!
}

type UserMaxAggregate {
  active: Boolean
  created_at: DateTime
  email: String
  id: String
  last_sign_in_at: DateTime
  name: String
  password: String
  password_digest: String
  updated_at: DateTime
}

input UserMaxOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password: SortOrder
  password_digest: SortOrder
  updated_at: SortOrder
}

type UserMinAggregate {
  active: Boolean
  created_at: DateTime
  email: String
  id: String
  last_sign_in_at: DateTime
  name: String
  password: String
  password_digest: String
  updated_at: DateTime
}

input UserMinOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password: SortOrder
  password_digest: SortOrder
  updated_at: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password: SortOrder
  password_digest: SortOrder
  preferences: SortOrder
  updated_at: SortOrder
}

input UserOrderByWithRelationInput {
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password: SortOrder
  password_digest: SortOrder
  preferences: SortOrder
  updated_at: SortOrder
}

enum UserScalarFieldEnum {
  active
  created_at
  email
  id
  last_sign_in_at
  name
  password
  password_digest
  preferences
  updated_at
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  last_sign_in_at: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  password_digest: StringWithAggregatesFilter
  preferences: JsonWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

input UserUpdateInput {
  active: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  active: BoolFilter
  created_at: DateTimeFilter
  email: StringFilter
  id: StringFilter
  last_sign_in_at: DateTimeFilter
  name: StringFilter
  password: StringFilter
  password_digest: StringFilter
  preferences: JsonFilter
  updated_at: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}